{"ast":null,"code":"var _jsxFileName = \"/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-trivia-react-redux/src/PAGES/Game.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header'; // import { ThunkTrivia } from '../REDUX/Actions';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      // hashEmail: '',\n      // Gravatar: {},\n      index: 0\n    };\n    this.handleindex = this.handleindex.bind(this);\n  } // componentDidMount() {\n  //   const { getTrivia, token } = this.props;\n  //   getTrivia(token);\n  // }\n\n\n  handleindex() {\n    const index = this.state.index;\n    this.setState({\n      index: index + 1\n    });\n  } // Função retirada do site https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\n\n\n  shuffleArray(arr) {\n    // Loop em todos os elementos\n    for (let i = arr.length - 1; i > 0; i -= 1) {\n      // Escolhendo elemento aleatório\n      const j = Math.floor(Math.random() * (i + 1)); // Reposicionando elemento\n\n      var _ref = [arr[j], arr[i]];\n      arr[i] = _ref[0];\n      arr[j] = _ref[1];\n    } // Retornando array com aleatoriedade\n\n\n    return arr;\n  }\n\n  handleAnswers(obj) {\n    const correctAnswer = obj.correct_answer,\n          incorrectAnswers = obj.incorrect_answers;\n    const array = incorrectAnswers.map((answer, index) => React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": `wrong-answer-${index}`,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, answer));\n    array.push(React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"correct-answer\",\n      key: array.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, correctAnswer));\n    return this.shuffleArray(array);\n  }\n\n  render() {\n    const index = this.state.index;\n    const questions = this.props.questions;\n\n    if (questions !== undefined) {\n      return React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        \"data-testid\": \"question-category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Categoria:\", questions[index].category), React.createElement(\"p\", {\n        \"data-testid\": \"question-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, questions[index].question), this.handleAnswers(questions[index]), React.createElement(\"button\", {\n        type: \"button\",\n        \"data-testid\": \"btn-next\",\n        onClick: () => this.handleindex(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Pr\\xF3xima Pergunta\"));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Loading\");\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.GameReducer.questions.results\n});\n\nconst mapDispatchToProps = () => ({// getTrivia: (token) => dispatch(\n  //   ThunkTrivia(token),\n  // ),\n  // action: (name, email) => dispatch(actionLogin(name, email)),\n});\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.objectOf()).isRequired // getTrivia: PropTypes.func.isRequired,\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-trivia-react-redux/src/PAGES/Game.jsx"],"names":["React","PropTypes","connect","Header","Game","Component","constructor","state","index","handleindex","bind","setState","shuffleArray","arr","i","length","j","Math","floor","random","handleAnswers","obj","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","array","map","answer","push","render","questions","props","undefined","category","question","mapStateToProps","GameReducer","results","mapDispatchToProps","propTypes","arrayOf","objectOf","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CACA;;AAEA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACX;AACA;AACAC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD,GAVgC,CAYjC;AACA;AACA;AACA;;;AAEAD,EAAAA,WAAW,GAAG;AAAA,UACJD,KADI,GACM,KAAKD,KADX,CACJC,KADI;AAGZ,SAAKG,QAAL,CAAc;AAAEH,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,KAAd;AACD,GArBgC,CAuBjC;;;AACAI,EAAAA,YAAY,CAACC,GAAD,EAAM;AAChB;AACA,SAAK,IAAIC,CAAC,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAA1B,EAA6BD,CAAC,GAAG,CAAjC,EAAoCA,CAAC,IAAI,CAAzC,EAA4C;AAC1C;AACA,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV,CAF0C,CAG1C;;AAH0C,iBAIvB,CAACD,GAAG,CAACG,CAAD,CAAJ,EAASH,GAAG,CAACC,CAAD,CAAZ,CAJuB;AAIzCD,MAAAA,GAAG,CAACC,CAAD,CAJsC;AAIjCD,MAAAA,GAAG,CAACG,CAAD,CAJ8B;AAK3C,KAPe,CAQhB;;;AACA,WAAOH,GAAP;AACD;;AAEDO,EAAAA,aAAa,CAACC,GAAD,EAAM;AAAA,UACOC,aADP,GAC8DD,GAD9D,CACTE,cADS;AAAA,UACyCC,gBADzC,GAC8DH,GAD9D,CACsBI,iBADtB;AAEjB,UAAMC,KAAK,GAAGF,gBAAgB,CAACG,GAAjB,CAAqB,CAACC,MAAD,EAASpB,KAAT,KACjC;AACE,MAAA,IAAI,EAAC,QADP;AAEE,qBAAe,gBAAeA,KAAM,EAFtC;AAGE,MAAA,GAAG,EAAGA,KAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGoB,MALH,CADY,CAAd;AASAF,IAAAA,KAAK,CAACG,IAAN,CACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,qBAAY,gBAFd;AAGE,MAAA,GAAG,EAAGH,KAAK,CAACX,MAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKIO,aALJ,CADF;AASA,WAAO,KAAKV,YAAL,CAAkBc,KAAlB,CAAP;AACD;;AAEDI,EAAAA,MAAM,GAAG;AAAA,UACCtB,KADD,GACW,KAAKD,KADhB,CACCC,KADD;AAAA,UAECuB,SAFD,GAEe,KAAKC,KAFpB,CAECD,SAFD;;AAGP,QAAIA,SAAS,KAAKE,SAAlB,EAA6B;AAC3B,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAG,uBAAY,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEGF,SAAS,CAACvB,KAAD,CAAT,CAAiB0B,QAFpB,CAFF,EAME;AAAG,uBAAY,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,SAAS,CAACvB,KAAD,CAAT,CAAiB2B,QADpB,CANF,EASG,KAAKf,aAAL,CAAmBW,SAAS,CAACvB,KAAD,CAA5B,CATH,EAUE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,uBAAY,UAFd;AAGE,QAAA,OAAO,EAAG,MAAM,KAAKC,WAAL,EAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAVF,CADF;AAoBD;;AAAC,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA;AAGH;;AAtFgC;;AAyFnC,MAAM2B,eAAe,GAAI7B,KAAD,KAAY;AAClCwB,EAAAA,SAAS,EAAExB,KAAK,CAAC8B,WAAN,CAAkBN,SAAlB,CAA4BO;AADL,CAAZ,CAAxB;;AAIA,MAAMC,kBAAkB,GAAG,OAAO,CAChC;AACA;AACA;AACA;AAJgC,CAAP,CAA3B;;AAOAnC,IAAI,CAACoC,SAAL,GAAiB;AACfT,EAAAA,SAAS,EAAE9B,SAAS,CAACwC,OAAV,CAAkBxC,SAAS,CAACyC,QAAV,EAAlB,EAAwCC,UADpC,CAEf;;AAFe,CAAjB;AAKA,eAAezC,OAAO,CAACkC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CnC,IAA7C,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\n// import { ThunkTrivia } from '../REDUX/Actions';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      // hashEmail: '',\n      // Gravatar: {},\n      index: 0,\n    };\n    this.handleindex = this.handleindex.bind(this);\n  }\n\n  // componentDidMount() {\n  //   const { getTrivia, token } = this.props;\n  //   getTrivia(token);\n  // }\n\n  handleindex() {\n    const { index } = this.state;\n\n    this.setState({ index: index + 1 });\n  }\n\n  // Função retirada do site https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\n  shuffleArray(arr) {\n    // Loop em todos os elementos\n    for (let i = arr.length - 1; i > 0; i -= 1) {\n      // Escolhendo elemento aleatório\n      const j = Math.floor(Math.random() * (i + 1));\n      // Reposicionando elemento\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    // Retornando array com aleatoriedade\n    return arr;\n  }\n\n  handleAnswers(obj) {\n    const { correct_answer: correctAnswer, incorrect_answers: incorrectAnswers } = obj;\n    const array = incorrectAnswers.map((answer, index) => (\n      <button\n        type=\"button\"\n        data-testid={ `wrong-answer-${index}` }\n        key={ index }\n      >\n        {answer}\n      </button>\n    ));\n    array.push(\n      <button\n        type=\"button\"\n        data-testid=\"correct-answer\"\n        key={ array.length }\n      >\n        { correctAnswer }\n      </button>,\n    );\n    return this.shuffleArray(array);\n  }\n\n  render() {\n    const { index } = this.state;\n    const { questions } = this.props;\n    if (questions !== undefined) {\n      return (\n        <section>\n          <Header />\n          <p data-testid=\"question-category\">\n            Categoria:\n            {questions[index].category}\n          </p>\n          <p data-testid=\"question-text\">\n            {questions[index].question}\n          </p>\n          {this.handleAnswers(questions[index])}\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            onClick={ () => this.handleindex() }\n          >\n            Próxima Pergunta\n          </button>\n        </section>\n      );\n    } return (\n      <div>Loading</div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.GameReducer.questions.results,\n});\n\nconst mapDispatchToProps = () => ({\n  // getTrivia: (token) => dispatch(\n  //   ThunkTrivia(token),\n  // ),\n  // action: (name, email) => dispatch(actionLogin(name, email)),\n});\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.objectOf()).isRequired,\n  // getTrivia: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}