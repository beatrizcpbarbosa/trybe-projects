{"ast":null,"code":"var _jsxFileName = \"/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-trivia-react-redux/src/PAGES/Game.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../components/Header'; // import { ThunkTrivia } from '../REDUX/Actions';\n// comentario\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      nextBtnVisible: 'none',\n      selectedStyle: false,\n      index: 0,\n      time: 30,\n      globalScore: 0,\n      redirect: false\n    };\n    this.handleindex = this.handleindex.bind(this);\n    this.HandleTime = this.HandleTime.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n  }\n\n  componentDidMount() {\n    this.playTime();\n  }\n\n  componentDidUpdate() {\n    const time = this.state.time;\n\n    if (time === 0) {\n      clearInterval(this.timeout);\n    }\n  }\n\n  playTime() {\n    const time = this.state.time;\n    console.log('time');\n    console.log(time);\n    const segundo = 1000;\n    const maxTime = 30;\n\n    if (time <= maxTime && time > 0) {\n      console.log('playtime');\n      this.timeout = setInterval(this.HandleTime, segundo);\n    }\n  }\n\n  HandleTime() {\n    const time = this.state.time;\n    this.setState({\n      time: time - 1\n    });\n  }\n\n  handleindex() {\n    const index = this.state.index;\n    const maxQuestion = 4;\n\n    if (index === maxQuestion) {\n      return this.setState({\n        redirect: true\n      });\n    }\n\n    this.setState(prevState => ({\n      index: prevState.index + 1,\n      time: 30,\n      nextBtnVisible: 'none',\n      selectedStyle: false\n    }), this.playTime);\n  }\n\n  updateScore(points) {\n    const myLocalStorage = JSON.parse(localStorage.getItem('state'));\n    const _myLocalStorage$playe = myLocalStorage.player,\n          name = _myLocalStorage$playe.name,\n          gravatarEmail = _myLocalStorage$playe.gravatarEmail,\n          prevAssertions = _myLocalStorage$playe.assertions;\n    const assertions = Number(prevAssertions) + 1;\n\n    if (myLocalStorage !== null) {\n      const mlsNumber = Number(myLocalStorage.player.score);\n      const state = {\n        player: {\n          name,\n          assertions,\n          score: points + mlsNumber,\n          gravatarEmail\n        }\n      };\n      localStorage.setItem('state', JSON.stringify(state)); // localStorage.setItem('ranking', JSON.stringify(state));\n\n      this.setState({\n        globalScore: points + mlsNumber\n      });\n    } else {\n      const state = {\n        player: {\n          name,\n          assertions,\n          score: points,\n          gravatarEmail\n        }\n      };\n      localStorage.setItem('state', JSON.stringify(state)); // localStorage.setItem('ranking', JSON.stringify(state));\n\n      this.setState({\n        globalScore: points\n      });\n    }\n  }\n\n  handleClickAnswer(type, difficulty) {\n    clearInterval(this.timeout);\n    this.setState({\n      selectedStyle: true,\n      nextBtnVisible: ''\n    });\n    let level = 0;\n    const levelhard = 3;\n\n    switch (difficulty) {\n      case 'easy':\n        level = 1;\n        break;\n\n      case 'medium':\n        level = 2;\n        break;\n\n      case 'hard':\n        level = levelhard;\n        break;\n\n      default:\n        level = 1;\n        break;\n    }\n\n    if (type === 'correct') {\n      const tenPoints = 10;\n      const time = this.state.time;\n      const score = tenPoints + time * level;\n      this.updateScore(score); // localStorage.setItem('score', score);\n    }\n  }\n\n  handleAnswers(answers, difficulty) {\n    const _this$state = this.state,\n          time = _this$state.time,\n          selectedStyle = _this$state.selectedStyle;\n    let answerDisabled = false;\n    let corectborder = 'none';\n    let wrongborder = 'none';\n\n    if (time === 0) {\n      answerDisabled = true;\n    }\n\n    if (selectedStyle === true) {\n      corectborder = '3px solid rgb(6, 240, 15)';\n      wrongborder = '3px solid rgb(255, 0, 0)';\n    }\n\n    return answers.map((answer, index) => {\n      if (answer.correct === true) {\n        return React.createElement(\"button\", {\n          type: \"button\",\n          \"data-testid\": \"correct-answer\",\n          key: index,\n          onClick: () => this.handleClickAnswer('correct', difficulty),\n          disabled: answerDisabled,\n          style: {\n            border: [corectborder]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, answer.text);\n      }\n\n      return React.createElement(\"button\", {\n        type: \"button\",\n        \"data-testid\": `wrong-answer-${index}`,\n        key: index,\n        onClick: () => this.handleClickAnswer('wrong', difficulty),\n        disabled: answerDisabled,\n        style: {\n          border: [wrongborder]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, answer.text);\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          index = _this$state2.index,\n          time = _this$state2.time,\n          nextBtnVisible = _this$state2.nextBtnVisible,\n          globalScore = _this$state2.globalScore,\n          redirect = _this$state2.redirect;\n    const _this$props = this.props,\n          questions = _this$props.questions,\n          isLoading = _this$props.isLoading;\n    let nextbtnvisible2 = nextBtnVisible;\n\n    if (time === 0) {\n      nextbtnvisible2 = '';\n    }\n\n    if (redirect === true) {\n      return React.createElement(Redirect, {\n        to: \"/feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      });\n    }\n\n    if (isLoading === false) {\n      return React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: globalScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        \"data-testid\": \"question-category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Categoria:\", questions[index].category), React.createElement(\"p\", {\n        \"data-testid\": \"question-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, questions[index].question), this.handleAnswers(questions[index].answers, questions[index].difficulty), React.createElement(\"button\", {\n        type: \"button\",\n        \"data-testid\": \"btn-next\",\n        onClick: () => this.handleindex(),\n        style: {\n          display: [nextbtnvisible2]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Pr\\xF3xima Pergunta\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, time));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Loading\");\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.GameReducer.questions,\n  isLoading: state.GameReducer.isLoading\n});\n\nconst mapDispatchToProps = () => ({// getTrivia: (token) => dispatch(\n  //   ThunkTrivia(token),\n  // ),\n  // action: (name, email) => dispatch(actionLogin(name, email)),\n});\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.objectOf()).isRequired,\n  isLoading: PropTypes.string.isRequired // getTrivia: PropTypes.func.isRequired,\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-trivia-react-redux/src/PAGES/Game.jsx"],"names":["React","PropTypes","connect","Redirect","Header","Game","Component","constructor","state","nextBtnVisible","selectedStyle","index","time","globalScore","redirect","handleindex","bind","HandleTime","updateScore","componentDidMount","playTime","componentDidUpdate","clearInterval","timeout","console","log","segundo","maxTime","setInterval","setState","maxQuestion","prevState","points","myLocalStorage","JSON","parse","localStorage","getItem","player","name","gravatarEmail","prevAssertions","assertions","Number","mlsNumber","score","setItem","stringify","handleClickAnswer","type","difficulty","level","levelhard","tenPoints","handleAnswers","answers","answerDisabled","corectborder","wrongborder","map","answer","correct","border","text","render","props","questions","isLoading","nextbtnvisible2","category","question","display","mapStateToProps","GameReducer","mapDispatchToProps","propTypes","arrayOf","objectOf","isRequired","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../components/Header';\n// import { ThunkTrivia } from '../REDUX/Actions';\n// comentario\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      nextBtnVisible: 'none',\n      selectedStyle: false,\n      index: 0,\n      time: 30,\n      globalScore: 0,\n      redirect: false,\n    };\n    this.handleindex = this.handleindex.bind(this);\n    this.HandleTime = this.HandleTime.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n  }\n\n  componentDidMount() {\n    this.playTime();\n  }\n\n  componentDidUpdate() {\n    const { time } = this.state;\n    if (time === 0) {\n      clearInterval(this.timeout);\n    }\n  }\n\n  playTime() {\n    const { time } = this.state;\n    console.log('time');\n    console.log(time);\n    const segundo = 1000;\n    const maxTime = 30;\n\n    if (time <= maxTime && time > 0) {\n      console.log('playtime');\n      this.timeout = setInterval(this.HandleTime, segundo);\n    }\n  }\n\n  HandleTime() {\n    const { time } = this.state;\n    this.setState({ time: time - 1 });\n  }\n\n  handleindex() {\n    const { index } = this.state;\n    const maxQuestion = 4;\n    if (index === maxQuestion) {\n      return this.setState({ redirect: true });\n    }\n    this.setState((prevState) => ({\n      index: prevState.index + 1,\n      time: 30,\n      nextBtnVisible: 'none',\n      selectedStyle: false,\n    }), this.playTime);\n  }\n\n  updateScore(points) {\n    const myLocalStorage = JSON.parse(localStorage.getItem('state'));\n    const { name, gravatarEmail, assertions: prevAssertions } = myLocalStorage.player;\n    const assertions = Number(prevAssertions) + 1;\n    if (myLocalStorage !== null) {\n      const mlsNumber = Number(myLocalStorage.player.score);\n      const state = {\n        player: {\n          name,\n          assertions,\n          score: (points + mlsNumber),\n          gravatarEmail,\n        },\n      };\n      localStorage.setItem('state', JSON.stringify(state));\n      // localStorage.setItem('ranking', JSON.stringify(state));\n      this.setState({\n        globalScore: (points + mlsNumber),\n      });\n    } else {\n      const state = {\n        player: {\n          name,\n          assertions,\n          score: points,\n          gravatarEmail,\n        },\n      };\n      localStorage.setItem('state', JSON.stringify(state));\n      // localStorage.setItem('ranking', JSON.stringify(state));\n      this.setState({\n        globalScore: points,\n      });\n    }\n  }\n\n  handleClickAnswer(type, difficulty) {\n    clearInterval(this.timeout);\n    this.setState({ selectedStyle: true, nextBtnVisible: '' });\n    let level = 0;\n    const levelhard = 3;\n    switch (difficulty) {\n    case 'easy': (level = 1);\n      break;\n    case 'medium': (level = 2);\n      break;\n    case 'hard': (level = levelhard);\n      break;\n    default: (level = 1);\n      break;\n    }\n\n    if (type === 'correct') {\n      const tenPoints = 10;\n      const { time } = this.state;\n      const score = tenPoints + (time * level);\n      this.updateScore(score);\n      // localStorage.setItem('score', score);\n    }\n  }\n\n  handleAnswers(answers, difficulty) {\n    const { time, selectedStyle } = this.state;\n    let answerDisabled = false;\n    let corectborder = 'none';\n    let wrongborder = 'none';\n    if (time === 0) {\n      answerDisabled = true;\n    }\n    if (selectedStyle === true) {\n      corectborder = '3px solid rgb(6, 240, 15)';\n      wrongborder = '3px solid rgb(255, 0, 0)';\n    }\n\n    return answers.map((answer, index) => {\n      if (answer.correct === true) {\n        return (\n          <button\n            type=\"button\"\n            data-testid=\"correct-answer\"\n            key={ index }\n            onClick={ () => this.handleClickAnswer('correct', difficulty) }\n            disabled={ answerDisabled }\n            style={ { border: [corectborder] } }\n          >\n            { answer.text }\n          </button>\n        );\n      }\n      return (\n        <button\n          type=\"button\"\n          data-testid={ `wrong-answer-${index}` }\n          key={ index }\n          onClick={ () => this.handleClickAnswer('wrong', difficulty) }\n          disabled={ answerDisabled }\n          style={ { border: [wrongborder] } }\n        >\n          {answer.text}\n        </button>\n      );\n    });\n  }\n\n  render() {\n    const { index, time, nextBtnVisible, globalScore, redirect } = this.state;\n    const { questions, isLoading } = this.props;\n\n    let nextbtnvisible2 = nextBtnVisible;\n\n    if (time === 0) {\n      nextbtnvisible2 = '';\n    }\n\n    if (redirect === true) {\n      return (<Redirect to=\"/feedback\" />);\n    }\n    if (isLoading === false) {\n      return (\n        <section>\n          <Header score={ globalScore } />\n          <p data-testid=\"question-category\">\n            Categoria:\n            {questions[index].category}\n          </p>\n          <p data-testid=\"question-text\">\n            {questions[index].question}\n          </p>\n          { this.handleAnswers(questions[index].answers, questions[index].difficulty)}\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            onClick={ () => this.handleindex() }\n            style={ { display: [nextbtnvisible2] } }\n          >\n            Próxima Pergunta\n          </button>\n          <div>\n            { time }\n          </div>\n        </section>\n      );\n    } return (\n      <div>Loading</div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.GameReducer.questions,\n  isLoading: state.GameReducer.isLoading,\n});\n\nconst mapDispatchToProps = () => ({\n  // getTrivia: (token) => dispatch(\n  //   ThunkTrivia(token),\n  // ),\n  // action: (name, email) => dispatch(actionLogin(name, email)),\n});\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.objectOf()).isRequired,\n  isLoading: PropTypes.string.isRequired,\n  // getTrivia: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}