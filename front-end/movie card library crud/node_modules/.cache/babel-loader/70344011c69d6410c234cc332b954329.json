{"ast":null,"code":"var _jsxFileName = \"/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-movie-card-library-crud/src/pages/EditMovie.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFetch = () => {\n      const {\n        movieForm\n      } = this.state;\n      movieAPI.updateMovie(movieForm).then(this.setState({\n        shouldRedirect: true\n      }));\n    };\n\n    this.handleMovie = () => {\n      const {\n        match: {\n          params: {\n            id\n          }\n        }\n      } = this.props; // const { match } = this.props;\n      // const { id } = match.params;\n\n      console.log(id);\n      movieAPI.getMovie(id).then(resolve => this.handleStateMovie(resolve));\n    };\n\n    this.handleStateMovie = param => {\n      this.setState({\n        movie: param,\n        status: ''\n      });\n    };\n\n    this.handleReturn = () => {\n      const {\n        shouldRedirect,\n        status,\n        movie\n      } = this.state;\n\n      if (status === 'loading') {\n        return /*#__PURE__*/React.createElement(Loading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 14\n          }\n        });\n      }\n\n      if (shouldRedirect) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(MovieForm, {\n        movie: movie,\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 12\n        }\n      });\n    };\n\n    this.state = {\n      shouldRedirect: false,\n      status: 'loading',\n      movie: {}\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    this.handleMovie();\n    this.handleFetch();\n  } // coloca o conteudo do formulario dentro do estado, updateMovie é um obejeto com varias chaves\n\n\n  handleSubmit(updatedMovie) {\n    // this.setState((previusState) => ({ movie: [...previusState.movie, updatedMovie] }));\n    this.setState({\n      movie: updatedMovie\n    }); // aqui estou pegando as informações da atulização do filme e adicionando junto com a informação que já existia\n  } // aqui estou chamando a \"API\" e depois que ela \"responde\" altero a chave shouldRedirect do estado\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"edit-movie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, this.handleReturn());\n  }\n\n}\n\nEditMovie.propTypes = {\n  id: PropTypes.number,\n  match: PropTypes.object\n}.isRequired;\nexport default EditMovie;","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-movie-card-library-crud/src/pages/EditMovie.js"],"names":["React","Component","PropTypes","Redirect","Loading","MovieForm","movieAPI","EditMovie","constructor","props","handleFetch","movieForm","state","updateMovie","then","setState","shouldRedirect","handleMovie","match","params","id","console","log","getMovie","resolve","handleStateMovie","param","movie","status","handleReturn","handleSubmit","bind","componentDidMount","updatedMovie","render","propTypes","number","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n      status: 'loading',\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    this.handleMovie();\n    this.handleFetch();\n  }\n\n  // coloca o conteudo do formulario dentro do estado, updateMovie é um obejeto com varias chaves\n  handleSubmit(updatedMovie) {\n    // this.setState((previusState) => ({ movie: [...previusState.movie, updatedMovie] }));\n    this.setState({ movie: updatedMovie });\n    // aqui estou pegando as informações da atulização do filme e adicionando junto com a informação que já existia\n  }\n\n  // aqui estou chamando a \"API\" e depois que ela \"responde\" altero a chave shouldRedirect do estado\n  handleFetch = () => {\n    const { movieForm } = this.state;\n    movieAPI.updateMovie(movieForm)\n      .then(this.setState({\n        shouldRedirect: true,\n      }));\n  }\n\n  // cahamo novamente, a partir do id do route (param) o função get movie, coloco ela no state para depois passar como props para o MovieForm\n  handleMovie = () => {\n    const { match: { params: { id } } } = this.props;\n    // const { match } = this.props;\n    // const { id } = match.params;\n    console.log(id);\n    movieAPI.getMovie(id)\n      .then((resolve) => this.handleStateMovie(resolve));\n  }\n\n  handleStateMovie = (param) => {\n    this.setState({\n      movie: param,\n      status: '',\n    });\n  }\n\n  handleReturn = () => {\n    const { shouldRedirect, status, movie } = this.state;\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    if (shouldRedirect) {\n      return <Redirect />;\n    }\n\n    return <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />;\n  }\n\n  render() {\n    return (\n      <div data-testid=\"edit-movie\">\n        { this.handleReturn() }\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  id: PropTypes.number,\n  match: PropTypes.object,\n}.isRequired;\n\nexport default EditMovie;\n"]},"metadata":{},"sourceType":"module"}