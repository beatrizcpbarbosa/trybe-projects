{"ast":null,"code":"var _jsxFileName = \"/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-movie-card-library-crud/src/pages/MovieList.js\";\nimport React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.handleMovies = param => {\n      this.setState({\n        movies: param,\n        loading: false\n      });\n    };\n\n    this.handleReturn = () => {\n      const {\n        loading,\n        movies\n      } = this.state;\n\n      if (loading) {\n        return /*#__PURE__*/React.createElement(Loading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return movies.map(movie => /*#__PURE__*/React.createElement(MovieCard, {\n        key: movie.title,\n        movie: movie,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 34\n        }\n      }));\n    };\n\n    this.state = {\n      movies: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies().then(resolve => this.handleMovies(resolve));\n  }\n\n  render() {\n    const {\n      movies\n    } = this.state; // Render Loading here if the request is still happening\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"movie-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, this.handleReturn);\n  }\n\n}\n\nexport default MovieList;","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-movie-card-library-crud/src/pages/MovieList.js"],"names":["React","Component","MovieCard","Loading","movieAPI","MovieList","constructor","handleMovies","param","setState","movies","loading","handleReturn","state","map","movie","title","componentDidMount","getMovies","then","resolve","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,sBAA1B;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAChCK,EAAAA,WAAW,GAAG;AACZ;;AADY,SAadC,YAbc,GAaEC,KAAD,IAAW;AACxB,WAAKC,QAAL,CAAc;AACZC,QAAAA,MAAM,EAAEF,KADI;AAEZG,QAAAA,OAAO,EAAE;AAFG,OAAd;AAID,KAlBa;;AAAA,SAoBdC,YApBc,GAoBC,MAAM;AACnB,YAAM;AAAED,QAAAA,OAAF;AAAWD,QAAAA;AAAX,UAAsB,KAAKG,KAAjC;;AACA,UAAIF,OAAJ,EAAa;AACX,4BAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aAAOD,MAAM,CAACI,GAAP,CAAYC,KAAD,iBAAW,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAGA,KAAK,CAACC,KAAvB;AAA+B,QAAA,KAAK,EAAGD,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAtB,CAAP;AACD,KA1Ba;;AAGZ,SAAKF,KAAL,GAAa;AACXH,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAEDM,EAAAA,iBAAiB,GAAG;AAClBb,IAAAA,QAAQ,CAACc,SAAT,GAAqBC,IAArB,CAA2BC,OAAD,IAAa,KAAKb,YAAL,CAAkBa,OAAlB,CAAvC;AACD;;AAiBDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEX,MAAAA;AAAF,QAAa,KAAKG,KAAxB,CADO,CAGP;;AAEA,wBACE;AAAK,qBAAY,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,KAAKD,YAFR,CADF;AAMD;;AAxC+B;;AA2ClC,eAAeP,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies().then((resolve) => this.handleMovies(resolve));\n  }\n\n  handleMovies = (param) => {\n    this.setState({\n      movies: param,\n      loading: false,\n    });\n  }\n\n  handleReturn = () => {\n    const { loading, movies } = this.state;\n    if (loading) {\n      return <Loading />\n    }\n    return movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />);\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    // Render Loading here if the request is still happening\n\n    return (\n      <div data-testid=\"movie-list\">\n        {/* {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)} */}\n        {this.handleReturn}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n"]},"metadata":{},"sourceType":"module"}