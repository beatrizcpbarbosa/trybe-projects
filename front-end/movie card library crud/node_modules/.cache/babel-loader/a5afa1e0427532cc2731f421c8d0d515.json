{"ast":null,"code":"var _jsxFileName = \"/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-movie-card-library-crud/src/pages/EditMovie.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMovie = () => {\n      const {\n        match: {\n          params: {\n            id\n          }\n        }\n      } = this.props;\n      console.log(id);\n      movieAPI.getMovie(id).then(resolve => this.handleStateMovie(resolve));\n    };\n\n    this.handleStateMovie = param => {\n      this.setState({\n        movie: param,\n        status: ''\n      });\n    };\n\n    this.handleFetch = param => {\n      movieAPI.updateMovie(param).then(this.setState({\n        shouldRedirect: true\n      }));\n    };\n\n    this.handleReturn = () => {\n      const {\n        shouldRedirect,\n        status,\n        movie\n      } = this.state;\n\n      if (status === 'loading') {\n        return /*#__PURE__*/React.createElement(Loading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 14\n          }\n        });\n      }\n\n      if (shouldRedirect) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(MovieForm, {\n        movie: movie,\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 12\n        }\n      });\n    };\n\n    this.state = {\n      shouldRedirect: false,\n      status: 'loading',\n      movie: {}\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('componente montado');\n    this.handleMovie();\n  } // cahamo novamente, a partir do id do route (param) o função get movie, coloco ela no state para depois passar como props para o MovieForm\n\n\n  // chama a função handleFetch pois queremos que ela chame api e atualize o filme toda vez que eu cliclar no botão\n  handleSubmit(updatedMovie) {\n    this.handleFetch(updatedMovie); // passo como parametro as informações da atulização dque foi pega pelo MovieForm(componente filho)\n  } // aqui estou chamando a \"API\" que atualiza o filme e depois que ela \"responde\" altero a chave shouldRedirect do estado\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"edit-movie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, this.handleReturn());\n  }\n\n}\n\nEditMovie.propTypes = {\n  id: PropTypes.number,\n  match: PropTypes.object\n}.isRequired;\nexport default EditMovie;","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-movie-card-library-crud/src/pages/EditMovie.js"],"names":["React","Component","PropTypes","Redirect","Loading","MovieForm","movieAPI","EditMovie","constructor","props","handleMovie","match","params","id","console","log","getMovie","then","resolve","handleStateMovie","param","setState","movie","status","handleFetch","updateMovie","shouldRedirect","handleReturn","state","handleSubmit","bind","componentDidMount","updatedMovie","render","propTypes","number","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,eAAnC;AACA,OAAO,KAAKC,QAAZ,MAA0B,sBAA1B;;AAEA,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AAChCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAgBnBC,WAhBmB,GAgBL,MAAM;AAClB,YAAM;AAAEC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAEC,YAAAA;AAAF;AAAV;AAAT,UAAgC,KAAKJ,KAA3C;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACAP,MAAAA,QAAQ,CAACU,QAAT,CAAkBH,EAAlB,EACGI,IADH,CACSC,OAAD,IAAa,KAAKC,gBAAL,CAAsBD,OAAtB,CADrB;AAED,KArBkB;;AAAA,SAuBnBC,gBAvBmB,GAuBCC,KAAD,IAAW;AAC5B,WAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAEF,KADK;AAEZG,QAAAA,MAAM,EAAE;AAFI,OAAd;AAID,KA5BkB;;AAAA,SAqCnBC,WArCmB,GAqCJJ,KAAD,IAAW;AACvBd,MAAAA,QAAQ,CAACmB,WAAT,CAAqBL,KAArB,EACGH,IADH,CACQ,KAAKI,QAAL,CAAc;AAClBK,QAAAA,cAAc,EAAE;AADE,OAAd,CADR;AAID,KA1CkB;;AAAA,SA4CnBC,YA5CmB,GA4CJ,MAAM;AACnB,YAAM;AAAED,QAAAA,cAAF;AAAkBH,QAAAA,MAAlB;AAA0BD,QAAAA;AAA1B,UAAoC,KAAKM,KAA/C;;AAEA,UAAIL,MAAM,KAAK,SAAf,EAA0B;AACxB,4BAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,UAAIG,cAAJ,EAAoB;AAClB,4BAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,0BAAO,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAGJ,KAAnB;AAA2B,QAAA,QAAQ,EAAG,KAAKO,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAxDkB;;AAEjB,SAAKD,KAAL,GAAa;AACXF,MAAAA,cAAc,EAAE,KADL;AAEXH,MAAAA,MAAM,EAAE,SAFG;AAGXD,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKA,SAAKO,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBjB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,SAAKL,WAAL;AACD,GAd+B,CAgBhC;;;AAeA;AACAmB,EAAAA,YAAY,CAACG,YAAD,EAAe;AACzB,SAAKR,WAAL,CAAiBQ,YAAjB,EADyB,CAEzB;AACD,GAnC+B,CAqChC;;;AAsBAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,qBAAY,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKN,YAAL,EADJ,CADF;AAKD;;AAjE+B;;AAoElCpB,SAAS,CAAC2B,SAAV,GAAsB;AACpBrB,EAAAA,EAAE,EAAEX,SAAS,CAACiC,MADM;AAEpBxB,EAAAA,KAAK,EAAET,SAAS,CAACkC;AAFG,EAGpBC,UAHF;AAKA,eAAe9B,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n      status: 'loading',\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('componente montado');\n    this.handleMovie();\n  }\n\n  // cahamo novamente, a partir do id do route (param) o função get movie, coloco ela no state para depois passar como props para o MovieForm\n  handleMovie = () => {\n    const { match: { params: { id } } } = this.props;\n    console.log(id);\n    movieAPI.getMovie(id)\n      .then((resolve) => this.handleStateMovie(resolve));\n  }\n\n  handleStateMovie = (param) => {\n    this.setState({\n      movie: param,\n      status: '',\n    });\n  }\n\n  // chama a função handleFetch pois queremos que ela chame api e atualize o filme toda vez que eu cliclar no botão\n  handleSubmit(updatedMovie) {\n    this.handleFetch(updatedMovie);\n    // passo como parametro as informações da atulização dque foi pega pelo MovieForm(componente filho)\n  }\n\n  // aqui estou chamando a \"API\" que atualiza o filme e depois que ela \"responde\" altero a chave shouldRedirect do estado\n  handleFetch = (param) => {\n    movieAPI.updateMovie(param)\n      .then(this.setState({\n        shouldRedirect: true,\n      }));\n  }\n\n  handleReturn = () => {\n    const { shouldRedirect, status, movie } = this.state;\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    if (shouldRedirect) {\n      return <Redirect />;\n    }\n\n    return <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />;\n  }\n\n  render() {\n    return (\n      <div data-testid=\"edit-movie\">\n        { this.handleReturn() }\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  id: PropTypes.number,\n  match: PropTypes.object,\n}.isRequired;\n\nexport default EditMovie;\n"]},"metadata":{},"sourceType":"module"}