{"ast":null,"code":"export const LOGIN = 'LOGIN';\nexport function actionLogin(name, email) {\n  return {\n    type: LOGIN,\n    payload: {\n      name,\n      email\n    }\n  };\n}\nexport const loadingRequest = () => ({\n  type: 'IS_LOADING'\n});\nexport const errorRequest = error => ({\n  type: 'ERROR_REQUEST',\n  error\n});\nexport const successRequest = ({\n  data,\n  name,\n  email\n}) => ({\n  type: 'SUCCESS_REQUEST',\n  data,\n  objState: {\n    player: {\n      name,\n      assertions: 0,\n      score: 0,\n      gravatarEmail: email\n    }\n  }\n});\nexport const successQuestions = data => ({\n  type: 'SUCCESS_QUESTIONS',\n  data\n}); // Função retirada do site https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\n\nconst shuffleArray = arr => {\n  // Loop em todos os elementos\n  for (let i = arr.length - 1; i > 0; i -= 1) {\n    // Escolhendo elemento aleatório\n    const j = Math.floor(Math.random() * (i + 1)); // Reposicionando elemento\n\n    var _ref = [arr[j], arr[i]];\n    arr[i] = _ref[0];\n    arr[j] = _ref[1];\n  } // Retornando array com aleatoriedade\n\n\n  return arr;\n};\n\nconst handleResponse = ({\n  results\n}) => {\n  const exportArray = results.map(receivedQuestion => {\n    const category = receivedQuestion.category,\n          type = receivedQuestion.type,\n          difficulty = receivedQuestion.difficulty,\n          question = receivedQuestion.question,\n          correctAnswer = receivedQuestion.correct_answer,\n          incorrectAnswers = receivedQuestion.incorrect_answers;\n    const answersOrd = incorrectAnswers.map(text => ({\n      text,\n      correct: false\n    }));\n    answersOrd.push({\n      text: correctAnswer,\n      correct: true\n    });\n    const answers = shuffleArray(answersOrd);\n    return {\n      category,\n      type,\n      difficulty,\n      question,\n      answers\n    };\n  });\n  return exportArray;\n};\n\nexport const ThunkTrivia = token => dispatch => fetch(`https://opentdb.com/api.php?amount=5&token=${token}`).then(response => response.json()).then(data => dispatch(successQuestions(handleResponse(data))));\nexport const ThunkAPI = (name, email) => async dispatch => {\n  dispatch(loadingRequest());\n  dispatch(actionLogin(name, email));\n  fetch('https://opentdb.com/api_token.php?command=request').then(response => response.json()).then(data => {\n    dispatch(ThunkTrivia(data.token));\n    dispatch(successRequest({\n      data,\n      name,\n      email\n    }));\n  });\n};","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-trivia-react-redux/src/REDUX/Actions/index.jsx"],"names":["LOGIN","actionLogin","name","email","type","payload","loadingRequest","errorRequest","error","successRequest","data","objState","player","assertions","score","gravatarEmail","successQuestions","shuffleArray","arr","i","length","j","Math","floor","random","handleResponse","results","exportArray","map","receivedQuestion","category","difficulty","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","answersOrd","text","correct","push","answers","ThunkTrivia","token","dispatch","fetch","then","response","json","ThunkAPI"],"mappings":"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","sourcesContent":["export const LOGIN = 'LOGIN';\n\nexport function actionLogin(name, email) {\n  return ({\n    type: LOGIN,\n    payload: {\n      name, email,\n    },\n  });\n}\n\nexport const loadingRequest = () => ({\n  type: 'IS_LOADING',\n});\n\nexport const errorRequest = (error) => ({\n  type: 'ERROR_REQUEST',\n  error,\n});\n\nexport const successRequest = ({ data, name, email }) => ({\n  type: 'SUCCESS_REQUEST',\n  data,\n  objState: {\n    player: {\n      name,\n      assertions: 0,\n      score: 0,\n      gravatarEmail: email,\n    },\n  },\n});\n\nexport const successQuestions = (data) => ({\n  type: 'SUCCESS_QUESTIONS',\n  data,\n});\n\n// Função retirada do site https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\nconst shuffleArray = (arr) => {\n  // Loop em todos os elementos\n  for (let i = arr.length - 1; i > 0; i -= 1) {\n    // Escolhendo elemento aleatório\n    const j = Math.floor(Math.random() * (i + 1));\n    // Reposicionando elemento\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  // Retornando array com aleatoriedade\n  return arr;\n};\n\nconst handleResponse = ({ results }) => {\n  const exportArray = results.map((receivedQuestion) => {\n    const { category, type, difficulty, question, correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers } = receivedQuestion;\n    const answersOrd = incorrectAnswers.map((text) => (\n      { text,\n        correct: false,\n      }\n    ));\n    answersOrd.push(\n      {\n        text: correctAnswer,\n        correct: true,\n      },\n    );\n    const answers = shuffleArray(answersOrd);\n    return { category, type, difficulty, question, answers };\n  });\n  return exportArray;\n};\n\nexport const ThunkTrivia = (token) => (dispatch) => (fetch(`https://opentdb.com/api.php?amount=5&token=${token}`)\n  .then((response) => (response.json()))\n  .then((data) => dispatch(successQuestions(handleResponse(data)))));\n\nexport const ThunkAPI = (name, email) => async (dispatch) => {\n  dispatch(loadingRequest());\n  dispatch(actionLogin(name, email));\n\n  fetch('https://opentdb.com/api_token.php?command=request')\n    .then((response) => (response.json()))\n    .then((data) => {\n      dispatch(ThunkTrivia(data.token));\n      dispatch(successRequest({ data, name, email }));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}