{"ast":null,"code":"var _jsxFileName = \"/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-trivia-react-redux/src/PAGES/Game.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header'; // import { ThunkTrivia } from '../REDUX/Actions';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      nextBtnVisible: 'none',\n      selectedStyle: false,\n      index: 0,\n      time: 30\n    };\n    this.handleindex = this.handleindex.bind(this);\n    this.HandleTime = this.HandleTime.bind(this);\n  }\n\n  componentDidMount() {\n    this.playTime();\n  }\n\n  componentDidUpdate() {\n    const time = this.state.time;\n\n    if (time === 0) {\n      clearInterval(this.timeout);\n    }\n  }\n\n  playTime() {\n    const time = this.state.time;\n    const segundo = 1000;\n    const maxTime = 30;\n\n    if (time <= maxTime && time > 0) {\n      this.timeout = setInterval(this.HandleTime, segundo);\n    }\n  }\n\n  handleindex() {\n    const index = this.state.index;\n    this.setState({\n      index: index + 1,\n      time: 30,\n      nextBtnVisible: 'none',\n      selectedStyle: false\n    });\n    this.playTime();\n  }\n\n  handleClickAnswer(type) {\n    clearInterval(this.timeout);\n    this.setState({\n      selectedStyle: true,\n      nextBtnVisible: ''\n    });\n\n    if (type === true) {\n      console.log(type);\n    }\n  }\n\n  handleAnswers(answers) {\n    const _this$state = this.state,\n          time = _this$state.time,\n          selectedStyle = _this$state.selectedStyle;\n    let answerDisabled = false;\n    let corectBorder = 'none';\n    let wrongBorder = 'none';\n\n    if (time === 0) {\n      answerDisabled = true;\n    }\n\n    if (selectedStyle === true) {\n      corectBorder = '3px solid rgb(6, 240, 15)';\n      wrongBorder = '3px solid rgb(255, 0, 0)';\n    }\n\n    return answers.map((answer, index) => {\n      if (answer.correct === true) {\n        return React.createElement(\"button\", {\n          type: \"button\",\n          \"data-testid\": \"correct-answer\",\n          key: index,\n          onClick: () => this.handleClickAnswer('correct'),\n          disabled: answerDisabled,\n          style: {\n            border: [corectBorder]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, answer.text);\n      }\n\n      return React.createElement(\"button\", {\n        type: \"button\",\n        \"data-testid\": `wrong-answer-${index}`,\n        key: index,\n        onClick: () => this.handleClickAnswer('wrong'),\n        disabled: answerDisabled,\n        style: {\n          border: [wrongBorder]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, answer.text);\n    });\n  }\n\n  HandleTime() {\n    const time = this.state.time;\n    this.setState({\n      time: time - 1\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          index = _this$state2.index,\n          time = _this$state2.time,\n          nextBtnVisible = _this$state2.nextBtnVisible;\n    const _this$props = this.props,\n          questions = _this$props.questions,\n          isLoading = _this$props.isLoading;\n    let nextBtnVisible2 = nextBtnVisible;\n\n    if (time === 0) {\n      nextBtnVisible2 = '';\n    }\n\n    if (isLoading === false) {\n      return React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        \"data-testid\": \"question-category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Categoria:\", questions[index].category), React.createElement(\"p\", {\n        \"data-testid\": \"question-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, questions[index].question), this.handleAnswers(questions[index].answers), React.createElement(\"button\", {\n        type: \"button\",\n        \"data-testid\": \"btn-next\",\n        onClick: () => this.handleindex(),\n        style: {\n          display: [nextBtnVisible2]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Pr\\xF3xima Pergunta\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, time));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Loading\");\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.GameReducer.questions,\n  isLoading: state.GameReducer.isLoading\n});\n\nconst mapDispatchToProps = () => ({// getTrivia: (token) => dispatch(\n  //   ThunkTrivia(token),\n  // ),\n  // action: (name, email) => dispatch(actionLogin(name, email)),\n});\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.objectOf()).isRequired,\n  isLoading: PropTypes.string.isRequired // getTrivia: PropTypes.func.isRequired,\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/beatrizbarbosa/Projects/trybe-projects/sd-010-a-project-trivia-react-redux/src/PAGES/Game.jsx"],"names":["React","PropTypes","connect","Header","Game","Component","constructor","state","nextBtnVisible","selectedStyle","index","time","handleindex","bind","HandleTime","componentDidMount","playTime","componentDidUpdate","clearInterval","timeout","segundo","maxTime","setInterval","setState","handleClickAnswer","type","console","log","handleAnswers","answers","answerDisabled","corectBorder","wrongBorder","map","answer","correct","border","text","render","props","questions","isLoading","nextBtnVisible2","category","question","display","mapStateToProps","GameReducer","mapDispatchToProps","propTypes","arrayOf","objectOf","isRequired","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\n// import { ThunkTrivia } from '../REDUX/Actions';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      nextBtnVisible: 'none',\n      selectedStyle: false,\n      index: 0,\n      time: 30,\n    };\n    this.handleindex = this.handleindex.bind(this);\n    this.HandleTime = this.HandleTime.bind(this);\n  }\n\n  componentDidMount() {\n    this.playTime();\n  }\n\n  componentDidUpdate() {\n    const { time } = this.state;\n    if (time === 0) {\n      clearInterval(this.timeout);\n    }\n  }\n\n  playTime() {\n    const { time } = this.state;\n    const segundo = 1000;\n    const maxTime = 30;\n\n    if (time <= maxTime && time > 0) {\n      this.timeout = setInterval(this.HandleTime, segundo);\n    }\n  }\n\n  handleindex() {\n    const { index } = this.state;\n\n    this.setState({\n      index: index + 1,\n      time: 30,\n      nextBtnVisible: 'none',\n      selectedStyle: false,\n    });\n    this.playTime();\n  }\n\n  handleClickAnswer(type) {\n    clearInterval(this.timeout);\n    this.setState({ selectedStyle: true, nextBtnVisible: '' });\n    if (type === true) {\n      console.log(type);\n    }\n  }\n\n  handleAnswers(answers) {\n    const { time, selectedStyle } = this.state;\n    let answerDisabled = false;\n    let corectBorder = 'none';\n    let wrongBorder = 'none';\n    if (time === 0) {\n      answerDisabled = true;\n    }\n    if (selectedStyle === true) {\n      corectBorder = '3px solid rgb(6, 240, 15)';\n      wrongBorder = '3px solid rgb(255, 0, 0)';\n    }\n\n    return answers.map((answer, index) => {\n      if (answer.correct === true) {\n        return (\n          <button\n            type=\"button\"\n            data-testid=\"correct-answer\"\n            key={ index }\n            onClick={ () => this.handleClickAnswer('correct') }\n            disabled={ answerDisabled }\n            style={ { border: [corectBorder] } }\n          >\n            { answer.text }\n          </button>\n        );\n      }\n      return (\n        <button\n          type=\"button\"\n          data-testid={ `wrong-answer-${index}` }\n          key={ index }\n          onClick={ () => this.handleClickAnswer('wrong') }\n          disabled={ answerDisabled }\n          style={ { border: [wrongBorder] } }\n        >\n          {answer.text}\n        </button>\n      );\n    });\n  }\n\n  HandleTime() {\n    const { time } = this.state;\n\n    this.setState({ time: time - 1 });\n  }\n\n  render() {\n    const { index, time, nextBtnVisible } = this.state;\n    const { questions, isLoading } = this.props;\n\n    let nextBtnVisible2 = nextBtnVisible;\n\n    if (time === 0) {\n      nextBtnVisible2 = '';\n    }\n\n    if (isLoading === false) {\n      return (\n        <section>\n          <Header />\n          <p data-testid=\"question-category\">\n            Categoria:\n            {questions[index].category}\n          </p>\n          <p data-testid=\"question-text\">\n            {questions[index].question}\n          </p>\n          { this.handleAnswers(questions[index].answers)}\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            onClick={ () => this.handleindex() }\n            style={ { display: [nextBtnVisible2] } }\n          >\n            Próxima Pergunta\n          </button>\n          <div>\n            { time }\n          </div>\n        </section>\n      );\n    } return (\n      <div>Loading</div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.GameReducer.questions,\n  isLoading: state.GameReducer.isLoading,\n});\n\nconst mapDispatchToProps = () => ({\n  // getTrivia: (token) => dispatch(\n  //   ThunkTrivia(token),\n  // ),\n  // action: (name, email) => dispatch(actionLogin(name, email)),\n});\n\nGame.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.objectOf()).isRequired,\n  isLoading: PropTypes.string.isRequired,\n  // getTrivia: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}